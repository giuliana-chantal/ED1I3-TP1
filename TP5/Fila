#include <iostream>
#include <iomanip>
#include <locale.h>

using namespace std;

#define SAIR 0
#define GERAR_SENHA 1
#define REALIZAR_ATENDIMENTO 2

struct No {
	float dado;
	No *prox;
};

struct Fila {
	No *ini;
	No *fim; 
};

Fila* init() {
	Fila *f = new Fila;
	f->ini = NULL;
	f->fim = NULL;
	return f;
}

int isEmpty(Fila *f) {
	return (f->ini == NULL);
}

int count(Fila *f) {
	int qtde = 0;
	No *no;
	no = f->ini;
	while (no != NULL) {
		qtde++;
		no = no->prox;
	}
	return qtde;
}

void print(Fila *f) {
	No *no;
	no = f->ini;
	cout << "-------------" << endl;
	while (no != NULL) {
		cout << no->dado << endl;
		no = no->prox;
	}
	cout << "-------------" << endl;
}

void enqueue(Fila *f, float v) {
	No *no = new No;
	no->dado = v;
	no->prox = NULL;
	if (isEmpty(f)) {
		f->ini = no;
	}
	else {
		f->fim->prox = no;
	}
	f->fim = no;
}

float dequeue(Fila *f) {
	float ret;
	if (isEmpty(f)) {
		ret = -1;
	}
	else {
		No *no = f->ini;
		ret = no->dado;
		f->ini = no->prox;
		if (f->ini == NULL) {
			f->fim = NULL;
		}
		free(no);
	}
	return ret;
}

void freeFila(Fila *f) {
	No *no = f->ini;
	while (no != NULL) {
		No *temp = no->prox;
		free(no);
		no = temp;
	}
	free(f);
}

int main(int argc, char** argv){
    setlocale(LC_ALL, "");

    int opcao;
    bool podeFinalizar = false;
    Fila* senhasGeradas = init();
    Fila* senhasAtendidas = init();

    while (!podeFinalizar)
    {        
        if(!isEmpty(senhasGeradas)){
            cout << count(senhasGeradas) << " senhas aguardando atendimento" << endl;
            cout << endl << "===============================" << endl << endl;
        }

        cout << "Escolha a opção que deseja visualizar" << endl << endl;

        cout << "0. Sair" << endl;
        cout << "1. Gerar senha" << endl;
        cout << "2. Realizar atendimento" << endl;


        cout << endl << "opção: " ;
        cin >> opcao;

        cout << endl << "===============================" << endl << endl;

        switch (opcao)
        {
            case SAIR:
                if(!isEmpty(senhasGeradas)){
                    cout << "O programa não pode ser fimizado até que todas as senhas sejam antedidas" << endl;
                }else{
                    cout << count(senhasAtendidas) << " senhas foram atendidas" << endl;
                    podeFinalizar = true;
                }
            break;

            case GERAR_SENHA:
                int novaSenha;

                if(isEmpty(senhasGeradas)){
                    novaSenha = 1;
                }else{
                    novaSenha = senhasGeradas->fim->dado + 1;
                }

                enqueue(senhasGeradas, novaSenha);

                cout << "Senha " << novaSenha << " gerada" << endl;
            break;

            case REALIZAR_ATENDIMENTO:
               int senhaAtendida;

                senhaAtendida = dequeue(senhasGeradas);

                if(senhaAtendida == -1){
                    cout << "Não há senhas a serem atendidas " << endl;
                }else{
                    enqueue(senhasAtendidas, senhaAtendida);

                    cout << "Senha " << senhaAtendida << " atendida com sucesso!" << endl;
                }
            break;

            default:
                cout << endl << "Opção invalida - selecione um valor de 0 até 2" << endl << endl;
            break;
        }

        cout << endl << "===============================" << endl  << endl;

    }       

    freeFila(senhasGeradas);
    freeFila(senhasAtendidas);

    return 0;
}
